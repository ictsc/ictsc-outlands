// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/admin.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ictsc/ictsc-outlands/backend/internal/proto/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "admin.v1.AdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminServiceGetMeProcedure is the fully-qualified name of the AdminService's GetMe RPC.
	AdminServiceGetMeProcedure = "/admin.v1.AdminService/GetMe"
	// AdminServiceGetAdminProcedure is the fully-qualified name of the AdminService's GetAdmin RPC.
	AdminServiceGetAdminProcedure = "/admin.v1.AdminService/GetAdmin"
	// AdminServiceGetAdminsProcedure is the fully-qualified name of the AdminService's GetAdmins RPC.
	AdminServiceGetAdminsProcedure = "/admin.v1.AdminService/GetAdmins"
	// AdminServicePostAdminProcedure is the fully-qualified name of the AdminService's PostAdmin RPC.
	AdminServicePostAdminProcedure = "/admin.v1.AdminService/PostAdmin"
	// AdminServicePatchMeProcedure is the fully-qualified name of the AdminService's PatchMe RPC.
	AdminServicePatchMeProcedure = "/admin.v1.AdminService/PatchMe"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	adminServiceServiceDescriptor         = v1.File_admin_v1_admin_proto.Services().ByName("AdminService")
	adminServiceGetMeMethodDescriptor     = adminServiceServiceDescriptor.Methods().ByName("GetMe")
	adminServiceGetAdminMethodDescriptor  = adminServiceServiceDescriptor.Methods().ByName("GetAdmin")
	adminServiceGetAdminsMethodDescriptor = adminServiceServiceDescriptor.Methods().ByName("GetAdmins")
	adminServicePostAdminMethodDescriptor = adminServiceServiceDescriptor.Methods().ByName("PostAdmin")
	adminServicePatchMeMethodDescriptor   = adminServiceServiceDescriptor.Methods().ByName("PatchMe")
)

// AdminServiceClient is a client for the admin.v1.AdminService service.
type AdminServiceClient interface {
	GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error)
	GetAdmin(context.Context, *connect.Request[v1.GetAdminRequest]) (*connect.Response[v1.GetAdminResponse], error)
	GetAdmins(context.Context, *connect.Request[v1.GetAdminsRequest]) (*connect.Response[v1.GetAdminsResponse], error)
	PostAdmin(context.Context, *connect.Request[v1.PostAdminRequest]) (*connect.Response[v1.PostAdminResponse], error)
	PatchMe(context.Context, *connect.Request[v1.PatchMeRequest]) (*connect.Response[v1.PatchMeResponse], error)
}

// NewAdminServiceClient constructs a client for the admin.v1.AdminService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminServiceClient{
		getMe: connect.NewClient[v1.GetMeRequest, v1.GetMeResponse](
			httpClient,
			baseURL+AdminServiceGetMeProcedure,
			connect.WithSchema(adminServiceGetMeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAdmin: connect.NewClient[v1.GetAdminRequest, v1.GetAdminResponse](
			httpClient,
			baseURL+AdminServiceGetAdminProcedure,
			connect.WithSchema(adminServiceGetAdminMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAdmins: connect.NewClient[v1.GetAdminsRequest, v1.GetAdminsResponse](
			httpClient,
			baseURL+AdminServiceGetAdminsProcedure,
			connect.WithSchema(adminServiceGetAdminsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		postAdmin: connect.NewClient[v1.PostAdminRequest, v1.PostAdminResponse](
			httpClient,
			baseURL+AdminServicePostAdminProcedure,
			connect.WithSchema(adminServicePostAdminMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		patchMe: connect.NewClient[v1.PatchMeRequest, v1.PatchMeResponse](
			httpClient,
			baseURL+AdminServicePatchMeProcedure,
			connect.WithSchema(adminServicePatchMeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	getMe     *connect.Client[v1.GetMeRequest, v1.GetMeResponse]
	getAdmin  *connect.Client[v1.GetAdminRequest, v1.GetAdminResponse]
	getAdmins *connect.Client[v1.GetAdminsRequest, v1.GetAdminsResponse]
	postAdmin *connect.Client[v1.PostAdminRequest, v1.PostAdminResponse]
	patchMe   *connect.Client[v1.PatchMeRequest, v1.PatchMeResponse]
}

// GetMe calls admin.v1.AdminService.GetMe.
func (c *adminServiceClient) GetMe(ctx context.Context, req *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error) {
	return c.getMe.CallUnary(ctx, req)
}

// GetAdmin calls admin.v1.AdminService.GetAdmin.
func (c *adminServiceClient) GetAdmin(ctx context.Context, req *connect.Request[v1.GetAdminRequest]) (*connect.Response[v1.GetAdminResponse], error) {
	return c.getAdmin.CallUnary(ctx, req)
}

// GetAdmins calls admin.v1.AdminService.GetAdmins.
func (c *adminServiceClient) GetAdmins(ctx context.Context, req *connect.Request[v1.GetAdminsRequest]) (*connect.Response[v1.GetAdminsResponse], error) {
	return c.getAdmins.CallUnary(ctx, req)
}

// PostAdmin calls admin.v1.AdminService.PostAdmin.
func (c *adminServiceClient) PostAdmin(ctx context.Context, req *connect.Request[v1.PostAdminRequest]) (*connect.Response[v1.PostAdminResponse], error) {
	return c.postAdmin.CallUnary(ctx, req)
}

// PatchMe calls admin.v1.AdminService.PatchMe.
func (c *adminServiceClient) PatchMe(ctx context.Context, req *connect.Request[v1.PatchMeRequest]) (*connect.Response[v1.PatchMeResponse], error) {
	return c.patchMe.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the admin.v1.AdminService service.
type AdminServiceHandler interface {
	GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error)
	GetAdmin(context.Context, *connect.Request[v1.GetAdminRequest]) (*connect.Response[v1.GetAdminResponse], error)
	GetAdmins(context.Context, *connect.Request[v1.GetAdminsRequest]) (*connect.Response[v1.GetAdminsResponse], error)
	PostAdmin(context.Context, *connect.Request[v1.PostAdminRequest]) (*connect.Response[v1.PostAdminResponse], error)
	PatchMe(context.Context, *connect.Request[v1.PatchMeRequest]) (*connect.Response[v1.PatchMeResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adminServiceGetMeHandler := connect.NewUnaryHandler(
		AdminServiceGetMeProcedure,
		svc.GetMe,
		connect.WithSchema(adminServiceGetMeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetAdminHandler := connect.NewUnaryHandler(
		AdminServiceGetAdminProcedure,
		svc.GetAdmin,
		connect.WithSchema(adminServiceGetAdminMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetAdminsHandler := connect.NewUnaryHandler(
		AdminServiceGetAdminsProcedure,
		svc.GetAdmins,
		connect.WithSchema(adminServiceGetAdminsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServicePostAdminHandler := connect.NewUnaryHandler(
		AdminServicePostAdminProcedure,
		svc.PostAdmin,
		connect.WithSchema(adminServicePostAdminMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServicePatchMeHandler := connect.NewUnaryHandler(
		AdminServicePatchMeProcedure,
		svc.PatchMe,
		connect.WithSchema(adminServicePatchMeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/admin.v1.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServiceGetMeProcedure:
			adminServiceGetMeHandler.ServeHTTP(w, r)
		case AdminServiceGetAdminProcedure:
			adminServiceGetAdminHandler.ServeHTTP(w, r)
		case AdminServiceGetAdminsProcedure:
			adminServiceGetAdminsHandler.ServeHTTP(w, r)
		case AdminServicePostAdminProcedure:
			adminServicePostAdminHandler.ServeHTTP(w, r)
		case AdminServicePatchMeProcedure:
			adminServicePatchMeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.GetMe is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetAdmin(context.Context, *connect.Request[v1.GetAdminRequest]) (*connect.Response[v1.GetAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.GetAdmin is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetAdmins(context.Context, *connect.Request[v1.GetAdminsRequest]) (*connect.Response[v1.GetAdminsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.GetAdmins is not implemented"))
}

func (UnimplementedAdminServiceHandler) PostAdmin(context.Context, *connect.Request[v1.PostAdminRequest]) (*connect.Response[v1.PostAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.PostAdmin is not implemented"))
}

func (UnimplementedAdminServiceHandler) PatchMe(context.Context, *connect.Request[v1.PatchMeRequest]) (*connect.Response[v1.PatchMeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.PatchMe is not implemented"))
}
