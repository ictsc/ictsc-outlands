// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/answer.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ictsc/ictsc-outlands/backend/internal/proto/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AnswerServiceName is the fully-qualified name of the AnswerService service.
	AnswerServiceName = "admin.v1.AnswerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AnswerServiceGetAnswerProcedure is the fully-qualified name of the AnswerService's GetAnswer RPC.
	AnswerServiceGetAnswerProcedure = "/admin.v1.AnswerService/GetAnswer"
	// AnswerServiceGetAnswersProcedure is the fully-qualified name of the AnswerService's GetAnswers
	// RPC.
	AnswerServiceGetAnswersProcedure = "/admin.v1.AnswerService/GetAnswers"
	// AnswerServicePutPointProcedure is the fully-qualified name of the AnswerService's PutPoint RPC.
	AnswerServicePutPointProcedure = "/admin.v1.AnswerService/PutPoint"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	answerServiceServiceDescriptor          = v1.File_admin_v1_answer_proto.Services().ByName("AnswerService")
	answerServiceGetAnswerMethodDescriptor  = answerServiceServiceDescriptor.Methods().ByName("GetAnswer")
	answerServiceGetAnswersMethodDescriptor = answerServiceServiceDescriptor.Methods().ByName("GetAnswers")
	answerServicePutPointMethodDescriptor   = answerServiceServiceDescriptor.Methods().ByName("PutPoint")
)

// AnswerServiceClient is a client for the admin.v1.AnswerService service.
type AnswerServiceClient interface {
	GetAnswer(context.Context, *connect.Request[v1.GetAnswerRequest]) (*connect.Response[v1.GetAnswerResponse], error)
	GetAnswers(context.Context, *connect.Request[v1.GetAnswersRequest]) (*connect.Response[v1.GetAnswersResponse], error)
	PutPoint(context.Context, *connect.Request[v1.PutPointRequest]) (*connect.Response[v1.PutPointResponse], error)
}

// NewAnswerServiceClient constructs a client for the admin.v1.AnswerService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAnswerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AnswerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &answerServiceClient{
		getAnswer: connect.NewClient[v1.GetAnswerRequest, v1.GetAnswerResponse](
			httpClient,
			baseURL+AnswerServiceGetAnswerProcedure,
			connect.WithSchema(answerServiceGetAnswerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAnswers: connect.NewClient[v1.GetAnswersRequest, v1.GetAnswersResponse](
			httpClient,
			baseURL+AnswerServiceGetAnswersProcedure,
			connect.WithSchema(answerServiceGetAnswersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		putPoint: connect.NewClient[v1.PutPointRequest, v1.PutPointResponse](
			httpClient,
			baseURL+AnswerServicePutPointProcedure,
			connect.WithSchema(answerServicePutPointMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// answerServiceClient implements AnswerServiceClient.
type answerServiceClient struct {
	getAnswer  *connect.Client[v1.GetAnswerRequest, v1.GetAnswerResponse]
	getAnswers *connect.Client[v1.GetAnswersRequest, v1.GetAnswersResponse]
	putPoint   *connect.Client[v1.PutPointRequest, v1.PutPointResponse]
}

// GetAnswer calls admin.v1.AnswerService.GetAnswer.
func (c *answerServiceClient) GetAnswer(ctx context.Context, req *connect.Request[v1.GetAnswerRequest]) (*connect.Response[v1.GetAnswerResponse], error) {
	return c.getAnswer.CallUnary(ctx, req)
}

// GetAnswers calls admin.v1.AnswerService.GetAnswers.
func (c *answerServiceClient) GetAnswers(ctx context.Context, req *connect.Request[v1.GetAnswersRequest]) (*connect.Response[v1.GetAnswersResponse], error) {
	return c.getAnswers.CallUnary(ctx, req)
}

// PutPoint calls admin.v1.AnswerService.PutPoint.
func (c *answerServiceClient) PutPoint(ctx context.Context, req *connect.Request[v1.PutPointRequest]) (*connect.Response[v1.PutPointResponse], error) {
	return c.putPoint.CallUnary(ctx, req)
}

// AnswerServiceHandler is an implementation of the admin.v1.AnswerService service.
type AnswerServiceHandler interface {
	GetAnswer(context.Context, *connect.Request[v1.GetAnswerRequest]) (*connect.Response[v1.GetAnswerResponse], error)
	GetAnswers(context.Context, *connect.Request[v1.GetAnswersRequest]) (*connect.Response[v1.GetAnswersResponse], error)
	PutPoint(context.Context, *connect.Request[v1.PutPointRequest]) (*connect.Response[v1.PutPointResponse], error)
}

// NewAnswerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAnswerServiceHandler(svc AnswerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	answerServiceGetAnswerHandler := connect.NewUnaryHandler(
		AnswerServiceGetAnswerProcedure,
		svc.GetAnswer,
		connect.WithSchema(answerServiceGetAnswerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	answerServiceGetAnswersHandler := connect.NewUnaryHandler(
		AnswerServiceGetAnswersProcedure,
		svc.GetAnswers,
		connect.WithSchema(answerServiceGetAnswersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	answerServicePutPointHandler := connect.NewUnaryHandler(
		AnswerServicePutPointProcedure,
		svc.PutPoint,
		connect.WithSchema(answerServicePutPointMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/admin.v1.AnswerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AnswerServiceGetAnswerProcedure:
			answerServiceGetAnswerHandler.ServeHTTP(w, r)
		case AnswerServiceGetAnswersProcedure:
			answerServiceGetAnswersHandler.ServeHTTP(w, r)
		case AnswerServicePutPointProcedure:
			answerServicePutPointHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAnswerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAnswerServiceHandler struct{}

func (UnimplementedAnswerServiceHandler) GetAnswer(context.Context, *connect.Request[v1.GetAnswerRequest]) (*connect.Response[v1.GetAnswerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AnswerService.GetAnswer is not implemented"))
}

func (UnimplementedAnswerServiceHandler) GetAnswers(context.Context, *connect.Request[v1.GetAnswersRequest]) (*connect.Response[v1.GetAnswersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AnswerService.GetAnswers is not implemented"))
}

func (UnimplementedAnswerServiceHandler) PutPoint(context.Context, *connect.Request[v1.PutPointRequest]) (*connect.Response[v1.PutPointResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AnswerService.PutPoint is not implemented"))
}
