// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/schedule.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ictsc/ictsc-outlands/backend/internal/proto/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ScheduleServiceName is the fully-qualified name of the ScheduleService service.
	ScheduleServiceName = "admin.v1.ScheduleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ScheduleServiceGetSchedulesProcedure is the fully-qualified name of the ScheduleService's
	// GetSchedules RPC.
	ScheduleServiceGetSchedulesProcedure = "/admin.v1.ScheduleService/GetSchedules"
	// ScheduleServicePatchScheduleProcedure is the fully-qualified name of the ScheduleService's
	// PatchSchedule RPC.
	ScheduleServicePatchScheduleProcedure = "/admin.v1.ScheduleService/PatchSchedule"
	// ScheduleServicePostScheduleProcedure is the fully-qualified name of the ScheduleService's
	// PostSchedule RPC.
	ScheduleServicePostScheduleProcedure = "/admin.v1.ScheduleService/PostSchedule"
	// ScheduleServiceDeleteScheduleProcedure is the fully-qualified name of the ScheduleService's
	// DeleteSchedule RPC.
	ScheduleServiceDeleteScheduleProcedure = "/admin.v1.ScheduleService/DeleteSchedule"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	scheduleServiceServiceDescriptor              = v1.File_admin_v1_schedule_proto.Services().ByName("ScheduleService")
	scheduleServiceGetSchedulesMethodDescriptor   = scheduleServiceServiceDescriptor.Methods().ByName("GetSchedules")
	scheduleServicePatchScheduleMethodDescriptor  = scheduleServiceServiceDescriptor.Methods().ByName("PatchSchedule")
	scheduleServicePostScheduleMethodDescriptor   = scheduleServiceServiceDescriptor.Methods().ByName("PostSchedule")
	scheduleServiceDeleteScheduleMethodDescriptor = scheduleServiceServiceDescriptor.Methods().ByName("DeleteSchedule")
)

// ScheduleServiceClient is a client for the admin.v1.ScheduleService service.
type ScheduleServiceClient interface {
	GetSchedules(context.Context, *connect.Request[v1.GetSchedulesRequest]) (*connect.Response[v1.GetSchedulesResponse], error)
	PatchSchedule(context.Context, *connect.Request[v1.PatchScheduleRequest]) (*connect.Response[v1.PatchScheduleResponse], error)
	PostSchedule(context.Context, *connect.Request[v1.PostScheduleRequest]) (*connect.Response[v1.PostScheduleResponse], error)
	DeleteSchedule(context.Context, *connect.Request[v1.DeleteScheduleRequest]) (*connect.Response[v1.DeleteScheduleResponse], error)
}

// NewScheduleServiceClient constructs a client for the admin.v1.ScheduleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewScheduleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ScheduleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &scheduleServiceClient{
		getSchedules: connect.NewClient[v1.GetSchedulesRequest, v1.GetSchedulesResponse](
			httpClient,
			baseURL+ScheduleServiceGetSchedulesProcedure,
			connect.WithSchema(scheduleServiceGetSchedulesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		patchSchedule: connect.NewClient[v1.PatchScheduleRequest, v1.PatchScheduleResponse](
			httpClient,
			baseURL+ScheduleServicePatchScheduleProcedure,
			connect.WithSchema(scheduleServicePatchScheduleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		postSchedule: connect.NewClient[v1.PostScheduleRequest, v1.PostScheduleResponse](
			httpClient,
			baseURL+ScheduleServicePostScheduleProcedure,
			connect.WithSchema(scheduleServicePostScheduleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSchedule: connect.NewClient[v1.DeleteScheduleRequest, v1.DeleteScheduleResponse](
			httpClient,
			baseURL+ScheduleServiceDeleteScheduleProcedure,
			connect.WithSchema(scheduleServiceDeleteScheduleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// scheduleServiceClient implements ScheduleServiceClient.
type scheduleServiceClient struct {
	getSchedules   *connect.Client[v1.GetSchedulesRequest, v1.GetSchedulesResponse]
	patchSchedule  *connect.Client[v1.PatchScheduleRequest, v1.PatchScheduleResponse]
	postSchedule   *connect.Client[v1.PostScheduleRequest, v1.PostScheduleResponse]
	deleteSchedule *connect.Client[v1.DeleteScheduleRequest, v1.DeleteScheduleResponse]
}

// GetSchedules calls admin.v1.ScheduleService.GetSchedules.
func (c *scheduleServiceClient) GetSchedules(ctx context.Context, req *connect.Request[v1.GetSchedulesRequest]) (*connect.Response[v1.GetSchedulesResponse], error) {
	return c.getSchedules.CallUnary(ctx, req)
}

// PatchSchedule calls admin.v1.ScheduleService.PatchSchedule.
func (c *scheduleServiceClient) PatchSchedule(ctx context.Context, req *connect.Request[v1.PatchScheduleRequest]) (*connect.Response[v1.PatchScheduleResponse], error) {
	return c.patchSchedule.CallUnary(ctx, req)
}

// PostSchedule calls admin.v1.ScheduleService.PostSchedule.
func (c *scheduleServiceClient) PostSchedule(ctx context.Context, req *connect.Request[v1.PostScheduleRequest]) (*connect.Response[v1.PostScheduleResponse], error) {
	return c.postSchedule.CallUnary(ctx, req)
}

// DeleteSchedule calls admin.v1.ScheduleService.DeleteSchedule.
func (c *scheduleServiceClient) DeleteSchedule(ctx context.Context, req *connect.Request[v1.DeleteScheduleRequest]) (*connect.Response[v1.DeleteScheduleResponse], error) {
	return c.deleteSchedule.CallUnary(ctx, req)
}

// ScheduleServiceHandler is an implementation of the admin.v1.ScheduleService service.
type ScheduleServiceHandler interface {
	GetSchedules(context.Context, *connect.Request[v1.GetSchedulesRequest]) (*connect.Response[v1.GetSchedulesResponse], error)
	PatchSchedule(context.Context, *connect.Request[v1.PatchScheduleRequest]) (*connect.Response[v1.PatchScheduleResponse], error)
	PostSchedule(context.Context, *connect.Request[v1.PostScheduleRequest]) (*connect.Response[v1.PostScheduleResponse], error)
	DeleteSchedule(context.Context, *connect.Request[v1.DeleteScheduleRequest]) (*connect.Response[v1.DeleteScheduleResponse], error)
}

// NewScheduleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewScheduleServiceHandler(svc ScheduleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	scheduleServiceGetSchedulesHandler := connect.NewUnaryHandler(
		ScheduleServiceGetSchedulesProcedure,
		svc.GetSchedules,
		connect.WithSchema(scheduleServiceGetSchedulesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	scheduleServicePatchScheduleHandler := connect.NewUnaryHandler(
		ScheduleServicePatchScheduleProcedure,
		svc.PatchSchedule,
		connect.WithSchema(scheduleServicePatchScheduleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	scheduleServicePostScheduleHandler := connect.NewUnaryHandler(
		ScheduleServicePostScheduleProcedure,
		svc.PostSchedule,
		connect.WithSchema(scheduleServicePostScheduleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	scheduleServiceDeleteScheduleHandler := connect.NewUnaryHandler(
		ScheduleServiceDeleteScheduleProcedure,
		svc.DeleteSchedule,
		connect.WithSchema(scheduleServiceDeleteScheduleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/admin.v1.ScheduleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ScheduleServiceGetSchedulesProcedure:
			scheduleServiceGetSchedulesHandler.ServeHTTP(w, r)
		case ScheduleServicePatchScheduleProcedure:
			scheduleServicePatchScheduleHandler.ServeHTTP(w, r)
		case ScheduleServicePostScheduleProcedure:
			scheduleServicePostScheduleHandler.ServeHTTP(w, r)
		case ScheduleServiceDeleteScheduleProcedure:
			scheduleServiceDeleteScheduleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedScheduleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedScheduleServiceHandler struct{}

func (UnimplementedScheduleServiceHandler) GetSchedules(context.Context, *connect.Request[v1.GetSchedulesRequest]) (*connect.Response[v1.GetSchedulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.ScheduleService.GetSchedules is not implemented"))
}

func (UnimplementedScheduleServiceHandler) PatchSchedule(context.Context, *connect.Request[v1.PatchScheduleRequest]) (*connect.Response[v1.PatchScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.ScheduleService.PatchSchedule is not implemented"))
}

func (UnimplementedScheduleServiceHandler) PostSchedule(context.Context, *connect.Request[v1.PostScheduleRequest]) (*connect.Response[v1.PostScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.ScheduleService.PostSchedule is not implemented"))
}

func (UnimplementedScheduleServiceHandler) DeleteSchedule(context.Context, *connect.Request[v1.DeleteScheduleRequest]) (*connect.Response[v1.DeleteScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.ScheduleService.DeleteSchedule is not implemented"))
}
