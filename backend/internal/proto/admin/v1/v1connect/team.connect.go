// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/team.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ictsc/ictsc-outlands/backend/internal/proto/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TeamServiceName is the fully-qualified name of the TeamService service.
	TeamServiceName = "admin.v1.TeamService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TeamServiceGetTeamsProcedure is the fully-qualified name of the TeamService's GetTeams RPC.
	TeamServiceGetTeamsProcedure = "/admin.v1.TeamService/GetTeams"
	// TeamServiceGetTeamProcedure is the fully-qualified name of the TeamService's GetTeam RPC.
	TeamServiceGetTeamProcedure = "/admin.v1.TeamService/GetTeam"
	// TeamServiceGetTeamConnectionInfoProcedure is the fully-qualified name of the TeamService's
	// GetTeamConnectionInfo RPC.
	TeamServiceGetTeamConnectionInfoProcedure = "/admin.v1.TeamService/GetTeamConnectionInfo"
	// TeamServiceGetAdminConnectionInfoProcedure is the fully-qualified name of the TeamService's
	// GetAdminConnectionInfo RPC.
	TeamServiceGetAdminConnectionInfoProcedure = "/admin.v1.TeamService/GetAdminConnectionInfo"
	// TeamServiceGetMembersProcedure is the fully-qualified name of the TeamService's GetMembers RPC.
	TeamServiceGetMembersProcedure = "/admin.v1.TeamService/GetMembers"
	// TeamServicePatchTeamProcedure is the fully-qualified name of the TeamService's PatchTeam RPC.
	TeamServicePatchTeamProcedure = "/admin.v1.TeamService/PatchTeam"
	// TeamServicePutTeamConnectionInfoProcedure is the fully-qualified name of the TeamService's
	// PutTeamConnectionInfo RPC.
	TeamServicePutTeamConnectionInfoProcedure = "/admin.v1.TeamService/PutTeamConnectionInfo"
	// TeamServicePutAdminConnectionInfoProcedure is the fully-qualified name of the TeamService's
	// PutAdminConnectionInfo RPC.
	TeamServicePutAdminConnectionInfoProcedure = "/admin.v1.TeamService/PutAdminConnectionInfo"
	// TeamServicePostTeamProcedure is the fully-qualified name of the TeamService's PostTeam RPC.
	TeamServicePostTeamProcedure = "/admin.v1.TeamService/PostTeam"
	// TeamServiceAddMemberProcedure is the fully-qualified name of the TeamService's AddMember RPC.
	TeamServiceAddMemberProcedure = "/admin.v1.TeamService/AddMember"
	// TeamServiceDeleteTeamProcedure is the fully-qualified name of the TeamService's DeleteTeam RPC.
	TeamServiceDeleteTeamProcedure = "/admin.v1.TeamService/DeleteTeam"
	// TeamServiceDeleteMemberProcedure is the fully-qualified name of the TeamService's DeleteMember
	// RPC.
	TeamServiceDeleteMemberProcedure = "/admin.v1.TeamService/DeleteMember"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	teamServiceServiceDescriptor                      = v1.File_admin_v1_team_proto.Services().ByName("TeamService")
	teamServiceGetTeamsMethodDescriptor               = teamServiceServiceDescriptor.Methods().ByName("GetTeams")
	teamServiceGetTeamMethodDescriptor                = teamServiceServiceDescriptor.Methods().ByName("GetTeam")
	teamServiceGetTeamConnectionInfoMethodDescriptor  = teamServiceServiceDescriptor.Methods().ByName("GetTeamConnectionInfo")
	teamServiceGetAdminConnectionInfoMethodDescriptor = teamServiceServiceDescriptor.Methods().ByName("GetAdminConnectionInfo")
	teamServiceGetMembersMethodDescriptor             = teamServiceServiceDescriptor.Methods().ByName("GetMembers")
	teamServicePatchTeamMethodDescriptor              = teamServiceServiceDescriptor.Methods().ByName("PatchTeam")
	teamServicePutTeamConnectionInfoMethodDescriptor  = teamServiceServiceDescriptor.Methods().ByName("PutTeamConnectionInfo")
	teamServicePutAdminConnectionInfoMethodDescriptor = teamServiceServiceDescriptor.Methods().ByName("PutAdminConnectionInfo")
	teamServicePostTeamMethodDescriptor               = teamServiceServiceDescriptor.Methods().ByName("PostTeam")
	teamServiceAddMemberMethodDescriptor              = teamServiceServiceDescriptor.Methods().ByName("AddMember")
	teamServiceDeleteTeamMethodDescriptor             = teamServiceServiceDescriptor.Methods().ByName("DeleteTeam")
	teamServiceDeleteMemberMethodDescriptor           = teamServiceServiceDescriptor.Methods().ByName("DeleteMember")
)

// TeamServiceClient is a client for the admin.v1.TeamService service.
type TeamServiceClient interface {
	GetTeams(context.Context, *connect.Request[v1.GetTeamsRequest]) (*connect.Response[v1.GetTeamsResponse], error)
	GetTeam(context.Context, *connect.Request[v1.GetTeamRequest]) (*connect.Response[v1.GetTeamResponse], error)
	GetTeamConnectionInfo(context.Context, *connect.Request[v1.GetTeamConnectionInfoRequest]) (*connect.Response[v1.GetTeamConnectionInfoResponse], error)
	GetAdminConnectionInfo(context.Context, *connect.Request[v1.GetAdminConnectionInfoRequest]) (*connect.Response[v1.GetAdminConnectionInfoResponse], error)
	GetMembers(context.Context, *connect.Request[v1.GetMembersRequest]) (*connect.Response[v1.GetMembersResponse], error)
	PatchTeam(context.Context, *connect.Request[v1.PatchTeamRequest]) (*connect.Response[v1.PatchTeamResponse], error)
	PutTeamConnectionInfo(context.Context, *connect.Request[v1.PutTeamConnectionInfoRequest]) (*connect.Response[v1.PutTeamConnectionInfoResponse], error)
	PutAdminConnectionInfo(context.Context, *connect.Request[v1.PutAdminConnectionInfoRequest]) (*connect.Response[v1.PutAdminConnectionInfoResponse], error)
	PostTeam(context.Context, *connect.Request[v1.PostTeamRequest]) (*connect.Response[v1.PostTeamResponse], error)
	AddMember(context.Context, *connect.Request[v1.AddMemberRequest]) (*connect.Response[v1.AddMemberResponse], error)
	DeleteTeam(context.Context, *connect.Request[v1.DeleteTeamRequest]) (*connect.Response[v1.DeleteTeamResponse], error)
	DeleteMember(context.Context, *connect.Request[v1.DeleteMemberRequest]) (*connect.Response[v1.DeleteMemberResponse], error)
}

// NewTeamServiceClient constructs a client for the admin.v1.TeamService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTeamServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TeamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &teamServiceClient{
		getTeams: connect.NewClient[v1.GetTeamsRequest, v1.GetTeamsResponse](
			httpClient,
			baseURL+TeamServiceGetTeamsProcedure,
			connect.WithSchema(teamServiceGetTeamsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTeam: connect.NewClient[v1.GetTeamRequest, v1.GetTeamResponse](
			httpClient,
			baseURL+TeamServiceGetTeamProcedure,
			connect.WithSchema(teamServiceGetTeamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTeamConnectionInfo: connect.NewClient[v1.GetTeamConnectionInfoRequest, v1.GetTeamConnectionInfoResponse](
			httpClient,
			baseURL+TeamServiceGetTeamConnectionInfoProcedure,
			connect.WithSchema(teamServiceGetTeamConnectionInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAdminConnectionInfo: connect.NewClient[v1.GetAdminConnectionInfoRequest, v1.GetAdminConnectionInfoResponse](
			httpClient,
			baseURL+TeamServiceGetAdminConnectionInfoProcedure,
			connect.WithSchema(teamServiceGetAdminConnectionInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMembers: connect.NewClient[v1.GetMembersRequest, v1.GetMembersResponse](
			httpClient,
			baseURL+TeamServiceGetMembersProcedure,
			connect.WithSchema(teamServiceGetMembersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		patchTeam: connect.NewClient[v1.PatchTeamRequest, v1.PatchTeamResponse](
			httpClient,
			baseURL+TeamServicePatchTeamProcedure,
			connect.WithSchema(teamServicePatchTeamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		putTeamConnectionInfo: connect.NewClient[v1.PutTeamConnectionInfoRequest, v1.PutTeamConnectionInfoResponse](
			httpClient,
			baseURL+TeamServicePutTeamConnectionInfoProcedure,
			connect.WithSchema(teamServicePutTeamConnectionInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		putAdminConnectionInfo: connect.NewClient[v1.PutAdminConnectionInfoRequest, v1.PutAdminConnectionInfoResponse](
			httpClient,
			baseURL+TeamServicePutAdminConnectionInfoProcedure,
			connect.WithSchema(teamServicePutAdminConnectionInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		postTeam: connect.NewClient[v1.PostTeamRequest, v1.PostTeamResponse](
			httpClient,
			baseURL+TeamServicePostTeamProcedure,
			connect.WithSchema(teamServicePostTeamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addMember: connect.NewClient[v1.AddMemberRequest, v1.AddMemberResponse](
			httpClient,
			baseURL+TeamServiceAddMemberProcedure,
			connect.WithSchema(teamServiceAddMemberMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTeam: connect.NewClient[v1.DeleteTeamRequest, v1.DeleteTeamResponse](
			httpClient,
			baseURL+TeamServiceDeleteTeamProcedure,
			connect.WithSchema(teamServiceDeleteTeamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteMember: connect.NewClient[v1.DeleteMemberRequest, v1.DeleteMemberResponse](
			httpClient,
			baseURL+TeamServiceDeleteMemberProcedure,
			connect.WithSchema(teamServiceDeleteMemberMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// teamServiceClient implements TeamServiceClient.
type teamServiceClient struct {
	getTeams               *connect.Client[v1.GetTeamsRequest, v1.GetTeamsResponse]
	getTeam                *connect.Client[v1.GetTeamRequest, v1.GetTeamResponse]
	getTeamConnectionInfo  *connect.Client[v1.GetTeamConnectionInfoRequest, v1.GetTeamConnectionInfoResponse]
	getAdminConnectionInfo *connect.Client[v1.GetAdminConnectionInfoRequest, v1.GetAdminConnectionInfoResponse]
	getMembers             *connect.Client[v1.GetMembersRequest, v1.GetMembersResponse]
	patchTeam              *connect.Client[v1.PatchTeamRequest, v1.PatchTeamResponse]
	putTeamConnectionInfo  *connect.Client[v1.PutTeamConnectionInfoRequest, v1.PutTeamConnectionInfoResponse]
	putAdminConnectionInfo *connect.Client[v1.PutAdminConnectionInfoRequest, v1.PutAdminConnectionInfoResponse]
	postTeam               *connect.Client[v1.PostTeamRequest, v1.PostTeamResponse]
	addMember              *connect.Client[v1.AddMemberRequest, v1.AddMemberResponse]
	deleteTeam             *connect.Client[v1.DeleteTeamRequest, v1.DeleteTeamResponse]
	deleteMember           *connect.Client[v1.DeleteMemberRequest, v1.DeleteMemberResponse]
}

// GetTeams calls admin.v1.TeamService.GetTeams.
func (c *teamServiceClient) GetTeams(ctx context.Context, req *connect.Request[v1.GetTeamsRequest]) (*connect.Response[v1.GetTeamsResponse], error) {
	return c.getTeams.CallUnary(ctx, req)
}

// GetTeam calls admin.v1.TeamService.GetTeam.
func (c *teamServiceClient) GetTeam(ctx context.Context, req *connect.Request[v1.GetTeamRequest]) (*connect.Response[v1.GetTeamResponse], error) {
	return c.getTeam.CallUnary(ctx, req)
}

// GetTeamConnectionInfo calls admin.v1.TeamService.GetTeamConnectionInfo.
func (c *teamServiceClient) GetTeamConnectionInfo(ctx context.Context, req *connect.Request[v1.GetTeamConnectionInfoRequest]) (*connect.Response[v1.GetTeamConnectionInfoResponse], error) {
	return c.getTeamConnectionInfo.CallUnary(ctx, req)
}

// GetAdminConnectionInfo calls admin.v1.TeamService.GetAdminConnectionInfo.
func (c *teamServiceClient) GetAdminConnectionInfo(ctx context.Context, req *connect.Request[v1.GetAdminConnectionInfoRequest]) (*connect.Response[v1.GetAdminConnectionInfoResponse], error) {
	return c.getAdminConnectionInfo.CallUnary(ctx, req)
}

// GetMembers calls admin.v1.TeamService.GetMembers.
func (c *teamServiceClient) GetMembers(ctx context.Context, req *connect.Request[v1.GetMembersRequest]) (*connect.Response[v1.GetMembersResponse], error) {
	return c.getMembers.CallUnary(ctx, req)
}

// PatchTeam calls admin.v1.TeamService.PatchTeam.
func (c *teamServiceClient) PatchTeam(ctx context.Context, req *connect.Request[v1.PatchTeamRequest]) (*connect.Response[v1.PatchTeamResponse], error) {
	return c.patchTeam.CallUnary(ctx, req)
}

// PutTeamConnectionInfo calls admin.v1.TeamService.PutTeamConnectionInfo.
func (c *teamServiceClient) PutTeamConnectionInfo(ctx context.Context, req *connect.Request[v1.PutTeamConnectionInfoRequest]) (*connect.Response[v1.PutTeamConnectionInfoResponse], error) {
	return c.putTeamConnectionInfo.CallUnary(ctx, req)
}

// PutAdminConnectionInfo calls admin.v1.TeamService.PutAdminConnectionInfo.
func (c *teamServiceClient) PutAdminConnectionInfo(ctx context.Context, req *connect.Request[v1.PutAdminConnectionInfoRequest]) (*connect.Response[v1.PutAdminConnectionInfoResponse], error) {
	return c.putAdminConnectionInfo.CallUnary(ctx, req)
}

// PostTeam calls admin.v1.TeamService.PostTeam.
func (c *teamServiceClient) PostTeam(ctx context.Context, req *connect.Request[v1.PostTeamRequest]) (*connect.Response[v1.PostTeamResponse], error) {
	return c.postTeam.CallUnary(ctx, req)
}

// AddMember calls admin.v1.TeamService.AddMember.
func (c *teamServiceClient) AddMember(ctx context.Context, req *connect.Request[v1.AddMemberRequest]) (*connect.Response[v1.AddMemberResponse], error) {
	return c.addMember.CallUnary(ctx, req)
}

// DeleteTeam calls admin.v1.TeamService.DeleteTeam.
func (c *teamServiceClient) DeleteTeam(ctx context.Context, req *connect.Request[v1.DeleteTeamRequest]) (*connect.Response[v1.DeleteTeamResponse], error) {
	return c.deleteTeam.CallUnary(ctx, req)
}

// DeleteMember calls admin.v1.TeamService.DeleteMember.
func (c *teamServiceClient) DeleteMember(ctx context.Context, req *connect.Request[v1.DeleteMemberRequest]) (*connect.Response[v1.DeleteMemberResponse], error) {
	return c.deleteMember.CallUnary(ctx, req)
}

// TeamServiceHandler is an implementation of the admin.v1.TeamService service.
type TeamServiceHandler interface {
	GetTeams(context.Context, *connect.Request[v1.GetTeamsRequest]) (*connect.Response[v1.GetTeamsResponse], error)
	GetTeam(context.Context, *connect.Request[v1.GetTeamRequest]) (*connect.Response[v1.GetTeamResponse], error)
	GetTeamConnectionInfo(context.Context, *connect.Request[v1.GetTeamConnectionInfoRequest]) (*connect.Response[v1.GetTeamConnectionInfoResponse], error)
	GetAdminConnectionInfo(context.Context, *connect.Request[v1.GetAdminConnectionInfoRequest]) (*connect.Response[v1.GetAdminConnectionInfoResponse], error)
	GetMembers(context.Context, *connect.Request[v1.GetMembersRequest]) (*connect.Response[v1.GetMembersResponse], error)
	PatchTeam(context.Context, *connect.Request[v1.PatchTeamRequest]) (*connect.Response[v1.PatchTeamResponse], error)
	PutTeamConnectionInfo(context.Context, *connect.Request[v1.PutTeamConnectionInfoRequest]) (*connect.Response[v1.PutTeamConnectionInfoResponse], error)
	PutAdminConnectionInfo(context.Context, *connect.Request[v1.PutAdminConnectionInfoRequest]) (*connect.Response[v1.PutAdminConnectionInfoResponse], error)
	PostTeam(context.Context, *connect.Request[v1.PostTeamRequest]) (*connect.Response[v1.PostTeamResponse], error)
	AddMember(context.Context, *connect.Request[v1.AddMemberRequest]) (*connect.Response[v1.AddMemberResponse], error)
	DeleteTeam(context.Context, *connect.Request[v1.DeleteTeamRequest]) (*connect.Response[v1.DeleteTeamResponse], error)
	DeleteMember(context.Context, *connect.Request[v1.DeleteMemberRequest]) (*connect.Response[v1.DeleteMemberResponse], error)
}

// NewTeamServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTeamServiceHandler(svc TeamServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	teamServiceGetTeamsHandler := connect.NewUnaryHandler(
		TeamServiceGetTeamsProcedure,
		svc.GetTeams,
		connect.WithSchema(teamServiceGetTeamsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceGetTeamHandler := connect.NewUnaryHandler(
		TeamServiceGetTeamProcedure,
		svc.GetTeam,
		connect.WithSchema(teamServiceGetTeamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceGetTeamConnectionInfoHandler := connect.NewUnaryHandler(
		TeamServiceGetTeamConnectionInfoProcedure,
		svc.GetTeamConnectionInfo,
		connect.WithSchema(teamServiceGetTeamConnectionInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceGetAdminConnectionInfoHandler := connect.NewUnaryHandler(
		TeamServiceGetAdminConnectionInfoProcedure,
		svc.GetAdminConnectionInfo,
		connect.WithSchema(teamServiceGetAdminConnectionInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceGetMembersHandler := connect.NewUnaryHandler(
		TeamServiceGetMembersProcedure,
		svc.GetMembers,
		connect.WithSchema(teamServiceGetMembersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	teamServicePatchTeamHandler := connect.NewUnaryHandler(
		TeamServicePatchTeamProcedure,
		svc.PatchTeam,
		connect.WithSchema(teamServicePatchTeamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	teamServicePutTeamConnectionInfoHandler := connect.NewUnaryHandler(
		TeamServicePutTeamConnectionInfoProcedure,
		svc.PutTeamConnectionInfo,
		connect.WithSchema(teamServicePutTeamConnectionInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	teamServicePutAdminConnectionInfoHandler := connect.NewUnaryHandler(
		TeamServicePutAdminConnectionInfoProcedure,
		svc.PutAdminConnectionInfo,
		connect.WithSchema(teamServicePutAdminConnectionInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	teamServicePostTeamHandler := connect.NewUnaryHandler(
		TeamServicePostTeamProcedure,
		svc.PostTeam,
		connect.WithSchema(teamServicePostTeamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceAddMemberHandler := connect.NewUnaryHandler(
		TeamServiceAddMemberProcedure,
		svc.AddMember,
		connect.WithSchema(teamServiceAddMemberMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceDeleteTeamHandler := connect.NewUnaryHandler(
		TeamServiceDeleteTeamProcedure,
		svc.DeleteTeam,
		connect.WithSchema(teamServiceDeleteTeamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceDeleteMemberHandler := connect.NewUnaryHandler(
		TeamServiceDeleteMemberProcedure,
		svc.DeleteMember,
		connect.WithSchema(teamServiceDeleteMemberMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/admin.v1.TeamService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TeamServiceGetTeamsProcedure:
			teamServiceGetTeamsHandler.ServeHTTP(w, r)
		case TeamServiceGetTeamProcedure:
			teamServiceGetTeamHandler.ServeHTTP(w, r)
		case TeamServiceGetTeamConnectionInfoProcedure:
			teamServiceGetTeamConnectionInfoHandler.ServeHTTP(w, r)
		case TeamServiceGetAdminConnectionInfoProcedure:
			teamServiceGetAdminConnectionInfoHandler.ServeHTTP(w, r)
		case TeamServiceGetMembersProcedure:
			teamServiceGetMembersHandler.ServeHTTP(w, r)
		case TeamServicePatchTeamProcedure:
			teamServicePatchTeamHandler.ServeHTTP(w, r)
		case TeamServicePutTeamConnectionInfoProcedure:
			teamServicePutTeamConnectionInfoHandler.ServeHTTP(w, r)
		case TeamServicePutAdminConnectionInfoProcedure:
			teamServicePutAdminConnectionInfoHandler.ServeHTTP(w, r)
		case TeamServicePostTeamProcedure:
			teamServicePostTeamHandler.ServeHTTP(w, r)
		case TeamServiceAddMemberProcedure:
			teamServiceAddMemberHandler.ServeHTTP(w, r)
		case TeamServiceDeleteTeamProcedure:
			teamServiceDeleteTeamHandler.ServeHTTP(w, r)
		case TeamServiceDeleteMemberProcedure:
			teamServiceDeleteMemberHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTeamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTeamServiceHandler struct{}

func (UnimplementedTeamServiceHandler) GetTeams(context.Context, *connect.Request[v1.GetTeamsRequest]) (*connect.Response[v1.GetTeamsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.GetTeams is not implemented"))
}

func (UnimplementedTeamServiceHandler) GetTeam(context.Context, *connect.Request[v1.GetTeamRequest]) (*connect.Response[v1.GetTeamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.GetTeam is not implemented"))
}

func (UnimplementedTeamServiceHandler) GetTeamConnectionInfo(context.Context, *connect.Request[v1.GetTeamConnectionInfoRequest]) (*connect.Response[v1.GetTeamConnectionInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.GetTeamConnectionInfo is not implemented"))
}

func (UnimplementedTeamServiceHandler) GetAdminConnectionInfo(context.Context, *connect.Request[v1.GetAdminConnectionInfoRequest]) (*connect.Response[v1.GetAdminConnectionInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.GetAdminConnectionInfo is not implemented"))
}

func (UnimplementedTeamServiceHandler) GetMembers(context.Context, *connect.Request[v1.GetMembersRequest]) (*connect.Response[v1.GetMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.GetMembers is not implemented"))
}

func (UnimplementedTeamServiceHandler) PatchTeam(context.Context, *connect.Request[v1.PatchTeamRequest]) (*connect.Response[v1.PatchTeamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.PatchTeam is not implemented"))
}

func (UnimplementedTeamServiceHandler) PutTeamConnectionInfo(context.Context, *connect.Request[v1.PutTeamConnectionInfoRequest]) (*connect.Response[v1.PutTeamConnectionInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.PutTeamConnectionInfo is not implemented"))
}

func (UnimplementedTeamServiceHandler) PutAdminConnectionInfo(context.Context, *connect.Request[v1.PutAdminConnectionInfoRequest]) (*connect.Response[v1.PutAdminConnectionInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.PutAdminConnectionInfo is not implemented"))
}

func (UnimplementedTeamServiceHandler) PostTeam(context.Context, *connect.Request[v1.PostTeamRequest]) (*connect.Response[v1.PostTeamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.PostTeam is not implemented"))
}

func (UnimplementedTeamServiceHandler) AddMember(context.Context, *connect.Request[v1.AddMemberRequest]) (*connect.Response[v1.AddMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.AddMember is not implemented"))
}

func (UnimplementedTeamServiceHandler) DeleteTeam(context.Context, *connect.Request[v1.DeleteTeamRequest]) (*connect.Response[v1.DeleteTeamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.DeleteTeam is not implemented"))
}

func (UnimplementedTeamServiceHandler) DeleteMember(context.Context, *connect.Request[v1.DeleteMemberRequest]) (*connect.Response[v1.DeleteMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.DeleteMember is not implemented"))
}
