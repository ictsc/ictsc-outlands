// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: contestant/v1/auth.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ictsc/ictsc-outlands/backend/internal/proto/contestant/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "contestant.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceGetCallbackProcedure is the fully-qualified name of the AuthService's GetCallback RPC.
	AuthServiceGetCallbackProcedure = "/contestant.v1.AuthService/GetCallback"
	// AuthServicePostCodeProcedure is the fully-qualified name of the AuthService's PostCode RPC.
	AuthServicePostCodeProcedure = "/contestant.v1.AuthService/PostCode"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authServiceServiceDescriptor           = v1.File_contestant_v1_auth_proto.Services().ByName("AuthService")
	authServiceGetCallbackMethodDescriptor = authServiceServiceDescriptor.Methods().ByName("GetCallback")
	authServicePostCodeMethodDescriptor    = authServiceServiceDescriptor.Methods().ByName("PostCode")
)

// AuthServiceClient is a client for the contestant.v1.AuthService service.
type AuthServiceClient interface {
	GetCallback(context.Context, *connect.Request[v1.GetCallbackRequest]) (*connect.Response[v1.GetCallbackResponse], error)
	PostCode(context.Context, *connect.Request[v1.PostCodeRequest]) (*connect.Response[v1.PostCodeResponse], error)
}

// NewAuthServiceClient constructs a client for the contestant.v1.AuthService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		getCallback: connect.NewClient[v1.GetCallbackRequest, v1.GetCallbackResponse](
			httpClient,
			baseURL+AuthServiceGetCallbackProcedure,
			connect.WithSchema(authServiceGetCallbackMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		postCode: connect.NewClient[v1.PostCodeRequest, v1.PostCodeResponse](
			httpClient,
			baseURL+AuthServicePostCodeProcedure,
			connect.WithSchema(authServicePostCodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	getCallback *connect.Client[v1.GetCallbackRequest, v1.GetCallbackResponse]
	postCode    *connect.Client[v1.PostCodeRequest, v1.PostCodeResponse]
}

// GetCallback calls contestant.v1.AuthService.GetCallback.
func (c *authServiceClient) GetCallback(ctx context.Context, req *connect.Request[v1.GetCallbackRequest]) (*connect.Response[v1.GetCallbackResponse], error) {
	return c.getCallback.CallUnary(ctx, req)
}

// PostCode calls contestant.v1.AuthService.PostCode.
func (c *authServiceClient) PostCode(ctx context.Context, req *connect.Request[v1.PostCodeRequest]) (*connect.Response[v1.PostCodeResponse], error) {
	return c.postCode.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the contestant.v1.AuthService service.
type AuthServiceHandler interface {
	GetCallback(context.Context, *connect.Request[v1.GetCallbackRequest]) (*connect.Response[v1.GetCallbackResponse], error)
	PostCode(context.Context, *connect.Request[v1.PostCodeRequest]) (*connect.Response[v1.PostCodeResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceGetCallbackHandler := connect.NewUnaryHandler(
		AuthServiceGetCallbackProcedure,
		svc.GetCallback,
		connect.WithSchema(authServiceGetCallbackMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServicePostCodeHandler := connect.NewUnaryHandler(
		AuthServicePostCodeProcedure,
		svc.PostCode,
		connect.WithSchema(authServicePostCodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/contestant.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceGetCallbackProcedure:
			authServiceGetCallbackHandler.ServeHTTP(w, r)
		case AuthServicePostCodeProcedure:
			authServicePostCodeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) GetCallback(context.Context, *connect.Request[v1.GetCallbackRequest]) (*connect.Response[v1.GetCallbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("contestant.v1.AuthService.GetCallback is not implemented"))
}

func (UnimplementedAuthServiceHandler) PostCode(context.Context, *connect.Request[v1.PostCodeRequest]) (*connect.Response[v1.PostCodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("contestant.v1.AuthService.PostCode is not implemented"))
}
