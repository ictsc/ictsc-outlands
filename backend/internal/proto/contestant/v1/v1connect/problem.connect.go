// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: contestant/v1/problem.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ictsc/ictsc-outlands/backend/internal/proto/contestant/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProblemServiceName is the fully-qualified name of the ProblemService service.
	ProblemServiceName = "contestant.v1.ProblemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProblemServiceGetProblemsProcedure is the fully-qualified name of the ProblemService's
	// GetProblems RPC.
	ProblemServiceGetProblemsProcedure = "/contestant.v1.ProblemService/GetProblems"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	problemServiceServiceDescriptor           = v1.File_contestant_v1_problem_proto.Services().ByName("ProblemService")
	problemServiceGetProblemsMethodDescriptor = problemServiceServiceDescriptor.Methods().ByName("GetProblems")
)

// ProblemServiceClient is a client for the contestant.v1.ProblemService service.
type ProblemServiceClient interface {
	GetProblems(context.Context, *connect.Request[v1.GetProblemsRequest]) (*connect.Response[v1.GetProblemsResponse], error)
}

// NewProblemServiceClient constructs a client for the contestant.v1.ProblemService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProblemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProblemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &problemServiceClient{
		getProblems: connect.NewClient[v1.GetProblemsRequest, v1.GetProblemsResponse](
			httpClient,
			baseURL+ProblemServiceGetProblemsProcedure,
			connect.WithSchema(problemServiceGetProblemsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// problemServiceClient implements ProblemServiceClient.
type problemServiceClient struct {
	getProblems *connect.Client[v1.GetProblemsRequest, v1.GetProblemsResponse]
}

// GetProblems calls contestant.v1.ProblemService.GetProblems.
func (c *problemServiceClient) GetProblems(ctx context.Context, req *connect.Request[v1.GetProblemsRequest]) (*connect.Response[v1.GetProblemsResponse], error) {
	return c.getProblems.CallUnary(ctx, req)
}

// ProblemServiceHandler is an implementation of the contestant.v1.ProblemService service.
type ProblemServiceHandler interface {
	GetProblems(context.Context, *connect.Request[v1.GetProblemsRequest]) (*connect.Response[v1.GetProblemsResponse], error)
}

// NewProblemServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProblemServiceHandler(svc ProblemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	problemServiceGetProblemsHandler := connect.NewUnaryHandler(
		ProblemServiceGetProblemsProcedure,
		svc.GetProblems,
		connect.WithSchema(problemServiceGetProblemsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/contestant.v1.ProblemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProblemServiceGetProblemsProcedure:
			problemServiceGetProblemsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProblemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProblemServiceHandler struct{}

func (UnimplementedProblemServiceHandler) GetProblems(context.Context, *connect.Request[v1.GetProblemsRequest]) (*connect.Response[v1.GetProblemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("contestant.v1.ProblemService.GetProblems is not implemented"))
}
