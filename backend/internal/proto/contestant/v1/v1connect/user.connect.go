// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: contestant/v1/user.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ictsc/ictsc-outlands/backend/internal/proto/contestant/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "contestant.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetMeProcedure is the fully-qualified name of the UserService's GetMe RPC.
	UserServiceGetMeProcedure = "/contestant.v1.UserService/GetMe"
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/contestant.v1.UserService/GetUser"
	// UserServicePostUserProcedure is the fully-qualified name of the UserService's PostUser RPC.
	UserServicePostUserProcedure = "/contestant.v1.UserService/PostUser"
	// UserServicePatchUserProcedure is the fully-qualified name of the UserService's PatchUser RPC.
	UserServicePatchUserProcedure = "/contestant.v1.UserService/PatchUser"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userServiceServiceDescriptor         = v1.File_contestant_v1_user_proto.Services().ByName("UserService")
	userServiceGetMeMethodDescriptor     = userServiceServiceDescriptor.Methods().ByName("GetMe")
	userServiceGetUserMethodDescriptor   = userServiceServiceDescriptor.Methods().ByName("GetUser")
	userServicePostUserMethodDescriptor  = userServiceServiceDescriptor.Methods().ByName("PostUser")
	userServicePatchUserMethodDescriptor = userServiceServiceDescriptor.Methods().ByName("PatchUser")
)

// UserServiceClient is a client for the contestant.v1.UserService service.
type UserServiceClient interface {
	GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	PostUser(context.Context, *connect.Request[v1.PostUserRequest]) (*connect.Response[v1.PostUserResponse], error)
	PatchUser(context.Context, *connect.Request[v1.PatchUserRequest]) (*connect.Response[v1.PatchUserResponse], error)
}

// NewUserServiceClient constructs a client for the contestant.v1.UserService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		getMe: connect.NewClient[v1.GetMeRequest, v1.GetMeResponse](
			httpClient,
			baseURL+UserServiceGetMeProcedure,
			connect.WithSchema(userServiceGetMeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			connect.WithSchema(userServiceGetUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		postUser: connect.NewClient[v1.PostUserRequest, v1.PostUserResponse](
			httpClient,
			baseURL+UserServicePostUserProcedure,
			connect.WithSchema(userServicePostUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		patchUser: connect.NewClient[v1.PatchUserRequest, v1.PatchUserResponse](
			httpClient,
			baseURL+UserServicePatchUserProcedure,
			connect.WithSchema(userServicePatchUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getMe     *connect.Client[v1.GetMeRequest, v1.GetMeResponse]
	getUser   *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	postUser  *connect.Client[v1.PostUserRequest, v1.PostUserResponse]
	patchUser *connect.Client[v1.PatchUserRequest, v1.PatchUserResponse]
}

// GetMe calls contestant.v1.UserService.GetMe.
func (c *userServiceClient) GetMe(ctx context.Context, req *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error) {
	return c.getMe.CallUnary(ctx, req)
}

// GetUser calls contestant.v1.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// PostUser calls contestant.v1.UserService.PostUser.
func (c *userServiceClient) PostUser(ctx context.Context, req *connect.Request[v1.PostUserRequest]) (*connect.Response[v1.PostUserResponse], error) {
	return c.postUser.CallUnary(ctx, req)
}

// PatchUser calls contestant.v1.UserService.PatchUser.
func (c *userServiceClient) PatchUser(ctx context.Context, req *connect.Request[v1.PatchUserRequest]) (*connect.Response[v1.PatchUserResponse], error) {
	return c.patchUser.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the contestant.v1.UserService service.
type UserServiceHandler interface {
	GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	PostUser(context.Context, *connect.Request[v1.PostUserRequest]) (*connect.Response[v1.PostUserResponse], error)
	PatchUser(context.Context, *connect.Request[v1.PatchUserRequest]) (*connect.Response[v1.PatchUserResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceGetMeHandler := connect.NewUnaryHandler(
		UserServiceGetMeProcedure,
		svc.GetMe,
		connect.WithSchema(userServiceGetMeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserHandler := connect.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userServiceGetUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServicePostUserHandler := connect.NewUnaryHandler(
		UserServicePostUserProcedure,
		svc.PostUser,
		connect.WithSchema(userServicePostUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServicePatchUserHandler := connect.NewUnaryHandler(
		UserServicePatchUserProcedure,
		svc.PatchUser,
		connect.WithSchema(userServicePatchUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/contestant.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetMeProcedure:
			userServiceGetMeHandler.ServeHTTP(w, r)
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		case UserServicePostUserProcedure:
			userServicePostUserHandler.ServeHTTP(w, r)
		case UserServicePatchUserProcedure:
			userServicePatchUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("contestant.v1.UserService.GetMe is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("contestant.v1.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) PostUser(context.Context, *connect.Request[v1.PostUserRequest]) (*connect.Response[v1.PostUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("contestant.v1.UserService.PostUser is not implemented"))
}

func (UnimplementedUserServiceHandler) PatchUser(context.Context, *connect.Request[v1.PatchUserRequest]) (*connect.Response[v1.PatchUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("contestant.v1.UserService.PatchUser is not implemented"))
}
